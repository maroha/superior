<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="POS_Project" default="build">
	
	<!-- Global properties -->
	<property file="application.properties" />
	<property name="src.dir" value="${basedir}/src"/>
	<property name="build.dir" value="${basedir}/build"/>
	<property name="build.classes.dir" value="${build.dir}/classes"/>
	<property name="dist.dir" value="${build.dir}/jar"/>
	<property name="conf.dir" value="${basedir}/conf"/>
	<property name="lib.dir" value="${basedir}/lib"/>
	<property name="res.dir" value="${basedir}/res"/>
	<property name="main.class" value="ee.ut.math.tvt.lihtne.Intro"/>
	
	<!-- Paths -->
	<path id="build.classpath">
	    <fileset id="build.libs" dir="${lib.dir}" includes="*.jar"/>
	</path>
	
	<path id="run.classpath">
		<pathelement location="${build.classes.dir}"/>
		<pathelement location="${conf.dir}"/>
		<path refid="build.classpath"/>
	</path>
	
	<path id="dist.files">
		<fileset dir="${conf.dir}">
			<exclude name="*.dtd"/>
		</fileset>
		<pathelement location="application.properties"/>
		<pathelement location="version.properties"/>
	</path>
	
	<!-- Defined runnable targets -->
	
	<!-- Clean the build (deleting build classes dir) -->
	<target name="clean" description="Cleaning up previous build files">
		<delete dir="${build.classes.dir}"/>
	</target>
	
	<!-- Compile the code and put it into ${build.classes.dir}-->
	<target name="build" description="Compiling the code and putting files in the right location">
		<mkdir dir="${build.classes.dir}"/>
		<javac 
			srcdir="${src.dir}" 
			destdir="${build.classes.dir}"
			compiler="modern"
			encoding="utf-8"
			target="1.8"
			source="1.8"
			includeantruntime="false">
				<classpath refid="build.classpath"/>
		</javac>
	</target>
	
	<!-- Running build using ${main.class} as main class -->
	<target name="run" depends="build" description="Executing app via class Intro">
		<java classname="${main.class}" fork="yes">
			<classpath refid="run.classpath"/>
		</java>
	</target>
	
	<!-- Creating jar file and putting required files inside -->
	<target name="dist" depends="build" description="Builds the application as single jar file with all required files">
		<!-- inc build.revision.number -->
		<propertyfile file="version.properties">
			<entry key="build.revision.number" type="int" default="0" operation="+"/>
		</propertyfile>
		
		<!-- update build.number -->
		<property file="version.properties"/>
		<propertyfile file="version.properties">
			<entry key="build.number" value="${build.major.number}.${build.minor.number}.${build.revision.number}"/>
		</propertyfile>
		
		<mkdir dir="${dist.dir}" />
		<jar 
			jarfile="${dist.dir}/${team.name}.jar" 
			basedir="${build.classes.dir}">
			<zipgroupfileset refid="build.libs" />
			<zipfileset dir="${res.dir}" includes="*" prefix="res"/>
			<path refid="dist.files"/>
		    <manifest>
		    	<attribute name="Main-Class" value="${main.class}"/>
		    </manifest>
		</jar>
	</target>
	
	<!-- Running created jar file -->
	<target name="jrun" depends="dist" description="Run the jar file">
		<java jar="${dist.dir}/${team.name}.jar" fork="true"/>
	</target>
	
	<!--Commit command -->
	 <macrodef name="git">
			<attribute name="command" />
			<attribute name="options" default="" />
			<attribute name="dir" default="" />
			<element name="args" optional="true" />
			<sequential>
				<echo message="git @{command}" />
				<exec executable="git" dir="@{dir}">
					<arg value="@{command}" />
					<args/>
				</exec>
			</sequential>
		</macrodef>
	
	<target name="git_commit" description="Commits all changes to version git.">
		<input message="Commit message" addproperty="commit-message" />
		<input message="Username" addproperty="username" />
		<input message="Password" addproperty="password" />
		
		<echo message="Commiting all changes with message ${commit-message}" />
		<git command="add">
			<args>
				<arg value="." />
			</args>
		</git>
		<git command="commit">
			<args>
				<arg value="-am ${commit-message}" />
			</args>
		</git>
		<git command="push">
			<args>
				<arg value="https://${username}:${password}@github.com/maroha/superior.git" />
			</args>
		</git>
	</target>	
	
	
	
	
	
</project>
