<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="POS_Project" default="build">
	
	<!-- Global properties -->
	
	<!-- Source -->
	<property name="src.dir" value="${basedir}/src"/>
	<property name="test.dir" value="${basedir}/test"/>
	
	<!-- Build -->
	<property name="build.dir" value="${basedir}/build"/>
	<property name="build.classes.dir" value="${build.dir}/classes"/>
	<property name="build.test.dir" value="${build.dir}/test"/>
	
	<!-- Other -->
	<property file="application.properties" />
	<property name="dist.dir" value="${build.dir}/jar"/>
	<property name="conf.dir" value="${basedir}/conf"/>
	<property name="lib.dir" value="${basedir}/lib"/>
	<property name="res.dir" value="${basedir}/res"/>
	<property name="main.class" value="ee.ut.math.tvt.lihtne.Intro"/>

	<!-- database variables -->
	<property name="data.dir"	value="${basedir}/data"/>
	<property name="db.file"	value="${data.dir}/POSdb"/>
	<property name="db.alias"	value="POS"/>
	<property name="db.url" 	value="jdbc:hsqldb:hsql://localhost/POS"/>
	<property name="lib.hibernate.dir"   value="${lib.dir}/hibernate"/>
	
	<!-- test database variables -->
	<property name="test.data.dir"	value="${basedir}/test.data"/>
	<property name="test.db.file"	value="${test.data.dir}/POSdb"/>
	<property name="test.db.alias"	value="POS"/>
	
	<!-- Paths -->
	<path id="build.classpath">
	        <fileset id="build.libs" dir="${lib.dir}">
	            <include name="*.jar"/>
	        </fileset>

	        <fileset id="build.libs.hibernate" dir="${lib.hibernate.dir}">
	             <include name="*.jar"/>
	        </fileset>
	</path>
	
	<path id="run.classpath">
		<pathelement location="${build.classes.dir}"/>
		<pathelement location="${conf.dir}"/>
		<path refid="build.classpath"/>
	</path>
	
	<path id="test.classpath">
		<path refid="run.classpath"/>
		<pathelement path="${build.test.dir}/" />
	</path>
	
	<path id="dist.files">
		<fileset dir="${conf.dir}">
			<exclude name="*.dtd"/>
		</fileset>
		<pathelement location="application.properties"/>
		<pathelement location="version.properties"/>
	</path>
	
	<!-- Defined runnable targets -->
	
	<!-- JUnit test build -->
	<target name="build-tests" depends="build" description="Build the system">
		<mkdir dir="${build.test.dir}"/>
		<javac
            srcdir="${test.dir}"
            destdir="${build.test.dir}"
            debug="true"
            debuglevel="lines,vars,source"
			compiler="modern"
			encoding="utf-8"
			target="1.8"
			source="1.8"
        	classpathref="build.classpath"
			includeantruntime="false">
				<classpath>
					<pathelement path="${build.classes.dir}" />
				</classpath>
		</javac>
	</target>
	
	<!-- JUnit test run -->
	<target name="test" depends="build-tests" description="Run the template application">

		<junit>
			<classpath refid="test.classpath" />

			<formatter type="brief" usefile="false" />
			<batchtest>
				<fileset dir="${build.test.dir}" includes="**/*.class" />
			</batchtest>
		</junit>

	</target>
	
	<!-- Clean the build (deleting build classes dir) -->
	<target name="clean" description="Cleaning up previous build files">
		<delete dir="${build.classes.dir}"/>
	</target>
	
	<!-- Compile the code and put it into ${build.classes.dir}-->
	<target name="build" description="Compiling the code and putting files in the right location">
		<mkdir dir="${build.classes.dir}"/>
		<javac 
			srcdir="${src.dir}" 
			destdir="${build.classes.dir}"
			compiler="modern"
			encoding="utf-8"
			target="1.8"
			source="1.8"
			includeantruntime="false">
				<compilerarg line="-Xlint:deprecation" />
				<classpath refid="build.classpath"/>
		</javac>
	</target>
	
	<!-- Running build using ${main.class} as main class -->
	<target name="run" depends="build" description="Executing app via class Intro">
	    <java classname="${main.class}" fork="yes">
	    	  <classpath refid="run.classpath"/>
	          <!-- <jvmarg value="-Xdebug" />
	          <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044" /> -->
	    </java>
	</target>
	
	<!-- Creating jar file and putting required files inside -->
	<target name="dist" depends="build" description="Builds the application as single jar file with all required files">
		<!-- inc build.revision.number -->
		<propertyfile file="version.properties">
			<entry key="build.revision.number" type="int" default="0" operation="+"/>
		</propertyfile>
		
		<!-- update build.number -->
		<property file="version.properties"/>
		<propertyfile file="version.properties">
			<entry key="build.number" value="${build.major.number}.${build.minor.number}.${build.revision.number}"/>
		</propertyfile>
		
		<mkdir dir="${dist.dir}" />
		<jar
			jarfile="${dist.dir}/${team.name}.jar" 
			basedir="${build.classes.dir}">
			<zipgroupfileset refid="build.libs" />
			<zipgroupfileset refid="build.libs.hibernate" />
			<zipfileset dir="${res.dir}" includes="*" prefix="res"/>
			<path refid="dist.files"/>
		    <manifest>
		    	<attribute name="Main-Class" value="${main.class}"/>
		    </manifest>
		</jar>
	</target>
	
	<!-- Running created jar file -->
	<target name="jrun" depends="dist" description="Run the jar file">
		<java jar="${dist.dir}/${team.name}.jar" fork="true"/>
	</target>
	
	<target name="runc" depends="build" description="Run the application (console)">
		<java classname="${main.class}" fork="yes">
			<classpath refid="run.classpath"/>
			<arg value="console" />
		</java>
	</target>

	<!--Defining git macro -->
	 <macrodef name="git">
		<attribute name="command" />
		<attribute name="options" default="" />
		<attribute name="dir" default="" />
		<element name="args" optional="true" />
		<sequential>
			<echo message="git @{command}" />
			<exec executable="git" dir="@{dir}">
				<arg value="@{command}" />
				<args/>
			</exec>
		</sequential>
	</macrodef>
	
	<!-- Git commit command -->
	<target name="git_commit" description="Commits all changes to version git.">
		<input message="Commit message" addproperty="commit-message" />
		<input message="Username" addproperty="username" />
		<input message="Password" addproperty="password" />
		
		<echo message="Commiting all changes with message ${commit-message}" />
		<git command="add">
			<args>
				<arg value="-A" />
			</args>
		</git>
		<git command="commit">
			<args>
				<arg value="-m" />
				<arg value="${commit-message" />
				}
			</args>
		</git>
		<git command="push">
			<args>
				<arg value="https://${username}:${password}@github.com/maroha/superior.git" />
			</args>
		</git>
	</target>	
	
	<!-- Git tag command -->
	<target name="git_tag" description="Commits all changes to version git.">
		<input message="Tag name" addproperty="tag-name" />
		<input message="Tag comment" addproperty="comment" />
		<input message="Username" addproperty="username" />
		<input message="Password" addproperty="password" />
		
		<echo message="Creating tag ${tag-name} with comment ${comment}" />
		<git command="tag">
			<args>
				<arg value="-a" />
				<arg value="${tag-name}" />
				<arg value="-m" />
				<arg value="${comment}" />
			</args>
		</git>
		<git command="push">
			<args>
				<arg value="https://${username}:${password}@github.com/maroha/superior.git" />
				<arg value="--tags" />
			</args>
		</git>
	</target>	
	
	<target name="dbmanager" description="Start the HSQLDB manager">
	        <java
	            classname="org.hsqldb.util.DatabaseManagerSwing"
	            classpathref="run.classpath"
	            fork="yes"
	        >
	            <arg line="--user sa --url ${db.url}" />
	        </java>
	    </target>

	<target name="startdb" description="Start the HSQLDB with the default params">
	        <java
	            classname="org.hsqldb.Server"
	            classpathref="run.classpath"
	            fork="yes"
	        >
	            <arg line="-database.0 '${db.file}' -dbname.0 '${db.alias}'" /> 
	        </java>
	</target>
	
	<target name="test.startdb" description="Start the HSQLDB with the default params">
	        <java
	            classname="org.hsqldb.Server"
	            classpathref="run.classpath"
	            fork="yes"
	        >
	            <arg line="-database.0 '${test.db.file}' -dbname.0 '${test.db.alias}'" /> 
	        </java>
	</target>
	
</project>
